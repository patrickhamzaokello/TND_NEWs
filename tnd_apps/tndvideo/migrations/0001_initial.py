# Generated by Django 5.2.4 on 2025-10-03 19:10

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('news_scrapping', '0005_notificationtemplate_breakingnews_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('title', models.CharField(max_length=500)),
                ('summary', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('original_file', models.FileField(max_length=500, upload_to='videos/originals/%Y/%m/%d/')),
                ('original_file_size', models.BigIntegerField(default=0, help_text='Size in bytes')),
                ('original_filename', models.CharField(blank=True, max_length=255)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('fps', models.FloatField(blank=True, help_text='Frames per second', null=True)),
                ('bitrate', models.IntegerField(blank=True, help_text='Bitrate in kbps', null=True)),
                ('codec', models.CharField(blank=True, max_length=50)),
                ('thumbnail_url', models.URLField(blank=True, max_length=500)),
                ('thumbnail_file', models.ImageField(blank=True, null=True, upload_to='videos/thumbnails/%Y/%m/%d/')),
                ('master_playlist_path', models.CharField(blank=True, help_text='Path to master.m3u8 file', max_length=500)),
                ('metadata_file_path', models.CharField(blank=True, help_text='Path to metadata JSON file', max_length=500)),
                ('status', models.CharField(choices=[('pending', 'Pending Upload'), ('uploaded', 'Uploaded'), ('processing', 'Processing'), ('ready', 'Ready'), ('failed', 'Failed'), ('archived', 'Archived')], default='pending', max_length=20)),
                ('processing_progress', models.IntegerField(default=0, help_text='Processing progress percentage (0-100)')),
                ('processing_started_at', models.DateTimeField(blank=True, null=True)),
                ('processing_completed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_error', models.TextField(blank=True)),
                ('view_count', models.IntegerField(default=0)),
                ('total_watch_time_seconds', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='news_scrapping.category')),
                ('tags', models.ManyToManyField(blank=True, to='news_scrapping.tag')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_videos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'videos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp_seconds', models.FloatField(blank=True, help_text='Timestamp in video where comment was made', null=True)),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='tndvideo.videocomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_comments', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tndvideo.video')),
            ],
            options={
                'db_table': 'video_comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoProcessingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='queued', max_length=20)),
                ('task_id', models.CharField(blank=True, help_text='Celery/RQ task ID', max_length=100)),
                ('worker_id', models.CharField(blank=True, max_length=100)),
                ('current_step', models.CharField(blank=True, help_text='Current processing step (e.g., "Generating 720p")', max_length=100)),
                ('progress_percentage', models.IntegerField(default=0)),
                ('queued_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('processing_metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about processing')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processing_tasks', to='tndvideo.video')),
            ],
            options={
                'db_table': 'video_processing_queue',
                'ordering': ['-priority', 'queued_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoQuality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality', models.CharField(choices=[('low', 'Low - 360p'), ('medium', 'Medium - 720p'), ('high', 'High - 1080p')], max_length=10)),
                ('resolution_width', models.IntegerField(help_text='Width in pixels')),
                ('resolution_height', models.IntegerField(help_text='Height in pixels')),
                ('bitrate', models.IntegerField(help_text='Target bitrate in kbps')),
                ('playlist_file_path', models.CharField(help_text='Path to quality-specific playlist file (e.g., low.m3u8)', max_length=500)),
                ('segment_duration', models.FloatField(default=4.0, help_text='Duration of each segment in seconds')),
                ('total_segments', models.IntegerField(default=0)),
                ('total_size_bytes', models.BigIntegerField(default=0)),
                ('is_processed', models.BooleanField(default=False)),
                ('processing_error', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qualities', to='tndvideo.video')),
            ],
            options={
                'db_table': 'video_qualities',
                'ordering': ['video', 'quality'],
            },
        ),
        migrations.CreateModel(
            name='VideoView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(help_text='Anonymous session tracking', max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('watch_duration_seconds', models.FloatField(default=0, help_text='How long the user watched')),
                ('completion_percentage', models.FloatField(default=0, help_text='Percentage of video watched')),
                ('quality_watched', models.CharField(blank=True, help_text='Quality level watched most', max_length=10)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_position_seconds', models.FloatField(default=0, help_text='Last playback position')),
                ('is_completed', models.BooleanField(default=False, help_text='Watched more than 90%')),
                ('device_type', models.CharField(blank=True, choices=[('mobile', 'Mobile'), ('tablet', 'Tablet'), ('desktop', 'Desktop'), ('tv', 'Smart TV')], max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='video_views', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_views', to='tndvideo.video')),
            ],
            options={
                'db_table': 'video_views',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['status', 'is_active'], name='videos_status_4bdcb5_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['created_at'], name='videos_created_f84293_idx'),
        ),
        migrations.AddIndex(
            model_name='video',
            index=models.Index(fields=['published_at'], name='videos_publish_8b16cf_idx'),
        ),
        migrations.AddIndex(
            model_name='videocomment',
            index=models.Index(fields=['video', 'created_at'], name='video_comme_video_i_70cfb6_idx'),
        ),
        migrations.AddIndex(
            model_name='videocomment',
            index=models.Index(fields=['user'], name='video_comme_user_id_0f1d98_idx'),
        ),
        migrations.AddIndex(
            model_name='videocomment',
            index=models.Index(fields=['parent'], name='video_comme_parent__898fe7_idx'),
        ),
        migrations.AddIndex(
            model_name='videoprocessingqueue',
            index=models.Index(fields=['status', 'priority'], name='video_proce_status_f0dc69_idx'),
        ),
        migrations.AddIndex(
            model_name='videoprocessingqueue',
            index=models.Index(fields=['video'], name='video_proce_video_i_58a10a_idx'),
        ),
        migrations.AddIndex(
            model_name='videoprocessingqueue',
            index=models.Index(fields=['queued_at'], name='video_proce_queued__092fe7_idx'),
        ),
        migrations.AddIndex(
            model_name='videoquality',
            index=models.Index(fields=['video', 'quality'], name='video_quali_video_i_40c0e5_idx'),
        ),
        migrations.AddIndex(
            model_name='videoquality',
            index=models.Index(fields=['is_processed'], name='video_quali_is_proc_86d416_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='videoquality',
            unique_together={('video', 'quality')},
        ),
        migrations.AddIndex(
            model_name='videoview',
            index=models.Index(fields=['video', 'started_at'], name='video_views_video_i_2208b0_idx'),
        ),
        migrations.AddIndex(
            model_name='videoview',
            index=models.Index(fields=['user', 'started_at'], name='video_views_user_id_634fee_idx'),
        ),
        migrations.AddIndex(
            model_name='videoview',
            index=models.Index(fields=['session_id'], name='video_views_session_4e2da3_idx'),
        ),
    ]
